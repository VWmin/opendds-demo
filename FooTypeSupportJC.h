/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_FOOTYPESUPPORTJC_H
#define IDL2JNI_GENERATED_FOOTYPESUPPORTJC_H
#include "FooTypeSupportC.h"
#include "FooJC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "dds/DdsDcpsPublicationJC.h"
#include "dds/DdsDcpsSubscriptionExtJC.h"
#include "dds/DdsDcpsTopicJC.h"
#include "dds/DdsDcpsTypeSupportExtJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "Foo_Export.h"
/* Generated by D:\OpenDDS-3.23.1\bin\idl2jni running on input file FooTypeSupport.idl */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: Baz */



/* Begin TYPEDEF: BarSeq */

Foo_Export
void copyToCxx (JNIEnv *jni, Baz::BarSeq &target, jobjectArray source);
Foo_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const Baz::BarSeq &source, bool createNewObject = false);

/* End TYPEDEF: BarSeq */


/* Begin INTERFACE: BarTypeSupport */

Foo_Export
void copyToCxx (JNIEnv *jni, Baz::BarTypeSupport_var &target, jobject source);
Foo_Export
void copyToJava (JNIEnv *jni, jobject &target, const Baz::BarTypeSupport_var &source, bool createNewObject = false);

class Foo_Export Baz_BarTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual Baz::BarTypeSupport
{
public:
  Baz_BarTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: BarTypeSupport */


/* Begin INTERFACE: BarDataWriter */

Foo_Export
void copyToCxx (JNIEnv *jni, Baz::BarDataWriter_var &target, jobject source);
Foo_Export
void copyToJava (JNIEnv *jni, jobject &target, const Baz::BarDataWriter_var &source, bool createNewObject = false);

class Foo_Export Baz_BarDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual Baz::BarDataWriter
{
public:
  Baz_BarDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const Baz::Bar& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const Baz::Bar& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const Baz::Bar& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const Baz::Bar& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const Baz::Bar& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const Baz::Bar& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const Baz::Bar& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const Baz::Bar& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (Baz::Bar& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const Baz::Bar& instance_data);

};


/* End INTERFACE: BarDataWriter */


/* Begin INTERFACE: BarDataReader */

Foo_Export
void copyToCxx (JNIEnv *jni, Baz::BarDataReader_var &target, jobject source);
Foo_Export
void copyToJava (JNIEnv *jni, jobject &target, const Baz::BarDataReader_var &source, bool createNewObject = false);

class Foo_Export Baz_BarDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual Baz::BarDataReader
{
public:
  Baz_BarDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (Baz::BarSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (Baz::BarSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (Baz::Bar& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (Baz::Bar& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_instance_w_condition (Baz::BarSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_instance_w_condition (Baz::BarSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_instance (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (Baz::BarSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (Baz::BarSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (Baz::BarSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (Baz::Bar& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const Baz::Bar& instance_data);

};


/* End INTERFACE: BarDataReader */

/* End MODULE: Baz */
#endif /* IDL2JNI_GENERATED_FOOTYPESUPPORTJC_H */
